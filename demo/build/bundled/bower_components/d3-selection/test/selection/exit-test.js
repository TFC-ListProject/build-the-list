var tape=require("tape"),jsdom=require("../jsdom"),d3=require("../../");tape("selection.exit() returns an empty selection before a data-join",function(e){var t=jsdom("<h1>hello</h1>").body,o=d3.select(t);e.deepEqual(o.exit(),{_groups:[[]],_parents:[null]}),e.end()}),tape("selection.exit() shares the update selectionâ€™s parents",function(e){var t=jsdom("<h1>hello</h1>").body,o=d3.select(t);e.equal(o.exit()._parents,o._parents),e.end()}),tape("selection.exit() returns the same selection each time",function(e){var t=jsdom("<h1>hello</h1>").body,o=d3.select(t);e.deepEqual(o.exit(),o.exit()),e.end()}),tape("selection.exit() contains unbound elements after a data-join",function(e){var t=jsdom("<div id='one'></div><div id='two'></div>").body,o=(t.querySelector("#one"),t.querySelector("#two")),i=d3.select(t).selectAll("div").data(["foo"]);e.deepEqual(i.exit(),{_groups:[[,o]],_parents:[t]}),e.end()}),tape("selection.exit() uses the order of the originating selection",function(e){var t=jsdom("<div id='one'></div><div id='two'></div><div id='three'></div>").body,o=(t.querySelector("#one"),t.querySelector("#two")),i=(t.querySelector("#three"),d3.select(t).selectAll("div").data(["three","one"],function(e){return e||this.id}));e.deepEqual(i.exit(),{_groups:[[,o]],_parents:[t]}),e.end()});